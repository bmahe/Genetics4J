variables:
  # Latest stable version
  RECOMMENDED_VERSION: "1.8"
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Xmx2G -Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  JOB_MAVEN_OVERRIDE: ""
  DEBIAN_FRONTEND: noninteractive

# See https://gitlab.com/help/user/application_security/index.md
include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

spotbugs-sast:
  variables:
    SAST_JAVA_VERSION: 17

stages:
  - build
  - test
  - verify
  - package
  - deploy

# This template uses jdk17 for verifying and deploying images
image: maven:3.8.4-eclipse-temurin-17

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  key: "$CI_JOB_NAME"
  paths:
    - .m2/repository


build:
  stage: build
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - apt-get install -yqq pocl-opencl-icd opencl-headers
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE package -DskipTests -DskipPITests -Dmaven.javadoc.skip=true'
  artifacts:
    paths:
      - core/target
      - extras/target
      - gp/target
      - gpu/target
      - moo/target
      - samples/target
      - target
    expire_in: 1 week


# For merge requests do not `deploy` but only run `validate`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.validate: &validate
  stage: test
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - apt-get install -yqq pocl-opencl-icd opencl-headers
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE test -DskipPITests -Dmaven.javadoc.skip=true'

# Validate merge requests using JDK17 - Temurin (default)
validate:jdk17:
  <<: *validate
  cache:
    key: "$CI_JOB_NAME-java17"
  artifacts:
    paths:
      - core/target
      - extras/target
      - gp/target
      - gpu/target
      - moo/target
      - samples/target
    expire_in: 1 week

# Validate merge requests using JDK17 - OpenJDK
validate:jdk17-openjdk:
  <<: *validate
  image: maven:3.8.4-openjdk-17
  cache:
    key: "$CI_JOB_NAME-java17-openjdk"
  before_script:
    - microdnf install gnuplot graphviz
    - microdnf install python3 python3-pip

# Validate merge requests using JDK17 - Amazon Corretto
validate:jdk17-amazoncorretto:
  <<: *validate
  image: maven:3.8.4-amazoncorretto-17
  cache:
    key: "$CI_JOB_NAME-java17-amazoncorretto"
  before_script:
    - yum install -y gnuplot graphviz
    - yum install -y python3 python3-pip

# Validate merge requests using JDK17 - IBM Semeru
validate:jdk17-ibm-semeru:
  <<: *validate
  image: maven:3.8.4-ibm-semeru-17-focal
  cache:
    key: "$CI_JOB_NAME-java17-ibm-semeru"
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - apt-get install -yqq pocl-opencl-icd opencl-headers

.verify: &verify
  stage: verify
  cache:
    key: "$CI_JOB_NAME-java17"
  before_script:
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - apt-get install -yqq pocl-opencl-icd opencl-headers

verify-core:
  <<: *verify
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE --projects core --also-make verify'
  artifacts:
    paths:
      - core/target
    expire_in: 1 week

verify-extras:
  <<: *verify
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE install -DskipTests -DskipPITests'
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE --projects extras verify'
    - 'rm -rfv $CI_PROJECT_DIR/.m2/repository/net/bmahe'
  artifacts:
    paths:
      - extras/target
    expire_in: 1 week

verify-gp:
  <<: *verify
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE install -DskipTests -DskipPITests'
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE --projects gp verify'
    - 'rm -rfv $CI_PROJECT_DIR/.m2/repository/net/bmahe'
  artifacts:
    paths:
      - gp/target
    expire_in: 1 week

verify-gpu:
  <<: *verify
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE install -DskipTests -DskipPITests'
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE --projects gpu verify'
    - 'rm -rfv $CI_PROJECT_DIR/.m2/repository/net/bmahe'
  artifacts:
    paths:
      - gpu/target
    expire_in: 1 week

verify-moo:
  <<: *verify
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE install -DskipTests -DskipPITests'
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE --projects moo verify'
    - 'rm -rfv $CI_PROJECT_DIR/.m2/repository/net/bmahe'
  artifacts:
    paths:
      - moo/target
    expire_in: 1 week

verify-samples:
  <<: *verify
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE install -DskipTests -DskipPITests'
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE --projects samples verify'
    - 'rm -rfv $CI_PROJECT_DIR/.m2/repository/net/bmahe'
  artifacts:
    paths:
      - samples/target
    expire_in: 1 week

site:
  stage: package
  artifacts:
    paths:
    - target/staging
  script:
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - apt-get install -yqq python3.9 python3-pip
    - apt-get install -yqq pocl-opencl-icd opencl-headers
    - rm /usr/bin/python3
    - ln -s /usr/bin/python3.9 /usr/bin/python3
    - pip3 install matplotlib pandas
    - mvn site site:stage -Dproject.recommended.version="${RECOMMENDED_VERSION}"

pages:
  stage: deploy
  script:
    - mv target/staging public
  artifacts:
    paths:
    - public
  only:
    - master

release:
  stage: deploy
  cache:
    policy: pull
  script:
    - if [ ! -f ci_settings.xml ];
        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://gitlab.com/help/user/project/packages/maven_repository.md#creating-maven-packages-with-gitlab-cicd for instructions.";
      fi
    - apt-get update -yqq
    - apt-get install -yqq openssh-client
    - eval $(ssh-agent -s)
    - rm -rf ~/.ssh/*
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${CI_SSH_PRIVATE_KEY_B64}" | base64 -d > ~/.ssh/ci_key
    - chmod 0600 ~/.ssh/ci_key
    - ssh-add ~/.ssh/ci_key
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "ci@bmahe.net"
    - git config --global user.name "Gitlab CI"
    - git checkout -B "$CI_BUILD_REF_NAME"
    - apt-get install -yqq gnuplot graphviz
    - apt-get install -yqq python3 python3-pip
    - rm /usr/bin/python3
    - ln -s /usr/bin/python3.9 /usr/bin/python3
    - mvn $MAVEN_CLI_OPTS --batch-mode release:prepare -DtagNameFormat="r@{project.version}" -DscmCommentPrefix="[maven-release-plugin][ci skip] " -s ci_settings.xml
    - mvn $MAVEN_CLI_OPTS --batch-mode release:perform -Dgoals="deploy" -s ci_settings.xml
  when: manual
  only:
    - master
