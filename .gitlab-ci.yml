
variables:
  # Latest stable version
  RECOMMENDED_VERSION: "1.4"
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Xmx2G -Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  JOB_MAVEN_OVERRIDE: ""

stages:
  - build
  - test
  - package
  - deploy

# This template uses jdk11 for verifying and deploying images
image: maven:3.6.3-jdk-11

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  key: "$CI_JOB_NAME"
  paths:
    - .m2/repository

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS $JOB_MAVEN_OVERRIDE verify'

# Verify merge requests using JDK11
verify:jdk11:
  <<: *verify

# Verify merge requests using JDK11 Openj9
verify:jdk11-openj9:
  <<: *verify
  image: maven:3.6.3-jdk-11-openj9
  cache:
    key: "$CI_JOB_NAME-java11openj9"

# Verify merge requests using JDK13
verify:jdk13:
  <<: *verify
  image: maven:3.6.3-jdk-13
  cache:
    key: "$CI_JOB_NAME-java13"
  variables:
    JOB_MAVEN_OVERRIDE: " -Djava.version=13 "

# Verify merge requests using JDK14
verify:jdk14:
  <<: *verify
  image: maven:3.6.3-jdk-14
  cache:
    key: "$CI_JOB_NAME-java14"
  variables:
    JOB_MAVEN_OVERRIDE: " -Djava.version=14 "

site:
  stage: package
  artifacts:
    paths:
    - target/staging
  script:
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - mvn verify site site:stage -Dproject.recommended.version="${RECOMMENDED_VERSION}"


pages:
  stage: deploy
  script:
    - mv target/staging public
  artifacts:
    paths:
    - public
  only:
    - master


release:
  stage: deploy
  cache:
    policy: pull
  script:
    - if [ ! -f ci_settings.xml ];
        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://gitlab.com/help/user/project/packages/maven_repository.md#creating-maven-packages-with-gitlab-cicd for instructions.";
      fi
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - rm -rf ~/.ssh/*
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${CI_SSH_PRIVATE_KEY_B64}" | base64 -d > ~/.ssh/ci_key
    - chmod 0600 ~/.ssh/ci_key
    - ssh-add ~/.ssh/ci_key
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "ci@bmahe.net"
    - git config --global user.name "Gitlab CI"
    - git checkout -B "$CI_BUILD_REF_NAME"
    - apt-get update -yqq
    - apt-get install -yqq gnuplot graphviz
    - mvn $MAVEN_CLI_OPTS --batch-mode release:prepare -DtagNameFormat="r@{project.version}" -DscmCommentPrefix="[maven-release-plugin][ci skip] " -s ci_settings.xml
    - mvn $MAVEN_CLI_OPTS --batch-mode release:perform -Dgoals="deploy" -s ci_settings.xml
  when: manual
  only:
    - master
